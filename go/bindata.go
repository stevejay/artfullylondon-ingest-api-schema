// Package ingestschema Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema/basic-types.json
// schema/event.json
// schema/feed-entity.json
// schema/feed-event.json
// schema/feed-venue.json
// schema/image-types.json
// schema/rules-types.json
// schema/venue-status.json
// schema/venue.json
package ingestschema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _basicTypesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x7d\x73\xe2\xb6\x13\xfe\xff\x3e\x85\x7e\xfe\xa5\x57\xdc\x8b\x83\x21\xd7\x97\xd0\xe9\x5c\x9d\x5c\x38\x7a\xc9\x51\x86\xbc\x30\x39\xce\xed\x28\xf6\x82\x75\xb1\x25\x57\x92\x03\x29\xa1\x9f\xbd\x23\xdb\x79\x01\x24\x20\x09\xcd\x64\x80\xf1\xb3\x7a\xb4\xcf\xee\x6a\xb5\x9e\xbc\x42\x08\x21\x6b\x4b\x04\x11\x24\xd8\x6a\x20\x2b\x92\x32\x6d\x54\xab\x5f\x05\xa3\x4e\xf1\x74\x87\xf1\x61\x35\xe4\x78\x20\x1d\xf7\xc7\x6a\xf1\xec\xff\xd6\x76\xb9\x92\x84\x77\xab\x44\xa3\x5a\xa2\x62\x07\x73\x39\xc8\xe2\xf8\x66\x27\x66\x34\x64\xb4\x7a\x5d\xab\x5e\x62\x41\x02\x47\xde\xa4\x20\x76\x14\xfb\x1d\x43\x08\x03\x42\x89\x24\x8c\x0a\xab\x81\x0a\x87\x72\x20\xc5\x32\x3a\x81\x61\x02\x54\xce\x00\xe5\x2a\x11\x70\x92\xaa\x65\x6a\x7f\x0f\x5d\xe3\x38\x03\x24\x23\x2c\x11\x11\x48\xe0\x01\x20\xc9\x50\x26\x00\x61\x81\x30\x3a\xeb\x1e\x23\x45\x88\x44\xc9\xb8\x3d\xcb\xa7\xfc\x52\x44\x42\x72\x42\x87\xf3\x68\x8a\xa5\x04\x9e\xef\xf4\x47\xa5\x8f\x9d\xbf\x5d\x67\x6f\xe7\xcf\x7f\x1a\xbf\xfe\x6f\xeb\xf5\xb7\x15\xfb\xbb\x37\xdb\x3f\xff\xe2\xf8\xb7\x95\x6f\xfa\xae\xb3\xe7\x39\x4d\xec\x0c\xfc\x47\x3f\x6d\xfb\xcd\x96\x75\xcf\x38\x7d\x20\xb7\xae\x81\x8b\x42\xc2\x4a\x7d\x85\x25\x92\x24\x01\x21\x71\x92\x9a\x14\x10\x2a\x61\x08\x7c\x1e\x4e\x08\x25\x49\x96\x58\x0d\x54\xd3\x7a\x92\x65\x79\x26\x27\xcf\x0d\x8b\x92\xab\xb4\x4e\x76\xeb\x53\x83\x58\x3c\x04\xf3\x0e\x2b\xdd\x76\xe7\x11\x3c\x2e\x91\xbd\x3d\xed\x76\x21\x96\x9a\xfd\x16\x02\x2b\x22\xc6\x25\x52\xc6\x28\xf7\xe5\xd9\x85\xd1\x77\x6b\x75\xff\xcb\x97\xb0\xf8\x77\xfa\x6e\xcd\x2f\xbf\xeb\xbb\xea\xd7\xd6\xfc\x62\x18\xe3\x24\x8d\x41\x95\x7d\x7f\x06\xc9\xd1\xba\x5b\xfb\xc9\x71\x6b\x4e\xed\xad\x35\x03\xfa\x5a\xb1\xaa\x2c\xd6\x16\xab\x8c\x5f\x28\xb6\x52\xca\xbb\xad\x17\xfa\xec\x46\xfe\xfd\xf6\xfb\x67\x28\xad\xed\x36\x5c\x77\x1d\x91\x11\x8c\x0f\x58\xcc\xf8\x4a\xa1\xb9\x55\x7e\xf0\x29\xea\x7e\xd8\x47\x11\x8c\x8b\x06\xf1\x82\xec\x16\x67\xd9\x75\xf6\xfc\xc9\x0f\xd3\x27\x2a\x6c\x36\x5d\xd7\xf3\xd6\x91\x98\x30\x0a\x37\x6b\x24\x52\xd9\x49\xcc\x6f\xca\xbe\x47\x28\x4a\x81\x06\x46\x7d\x2f\x38\x5d\x35\x57\xfd\x69\x9d\x05\x2a\x89\xbc\x39\x91\x58\x66\xe2\xa9\xbd\x03\x68\xce\xae\x09\x56\x1b\x46\x1d\xa0\x21\xa1\xc3\x2e\x5c\x13\x18\xcd\xad\xcc\x6d\x3a\xd9\x65\x4c\x44\x84\x2f\xe3\x79\xc9\xf3\xf0\x2c\xd5\x1a\x19\x18\x61\x19\x44\x10\x1e\x30\x2a\xb5\x37\xcf\x72\x59\x09\xa1\xc7\x40\x87\x32\x32\x36\x5a\x49\x64\xbc\xa4\x0f\x3e\x97\x36\x24\x42\xc9\x0d\xf7\xb1\x8c\x38\x63\xc9\xe6\xf2\xd1\xe1\x20\x16\x6f\xcc\x1c\x6a\x33\xb9\x04\x3d\xa3\x57\x94\x8d\xa8\x61\xa1\x97\xa6\x31\x09\xf2\x0c\xae\x75\xf4\xb1\xf2\xba\x89\x03\x12\x13\x49\x60\x83\xf5\xd6\x2a\xa8\x8f\x19\x4b\x85\xb6\x98\x30\x97\x04\xc7\xab\xcc\xda\x6c\x95\xc5\x26\xe3\x31\x8a\x00\xe2\x20\xc2\x84\x7b\x41\x00\x62\x83\xe1\x68\x66\x71\x5c\x72\x9a\x83\x61\x36\x68\x33\x33\xb6\xc9\x00\x60\x0e\xf8\xf7\xc1\x71\x3e\x5e\x6e\x4e\xfc\x01\x50\xc9\x71\xac\xf3\xb0\x07\xc2\x70\x06\xb8\x8c\x74\xc0\x21\xd6\x2f\x38\x61\x99\x8c\x96\x82\xf9\x56\x6b\xc4\x20\xe3\xf1\x53\xa5\x0f\x18\x4f\xb0\xea\x6a\x56\xc6\x89\x7e\x4c\xcb\xae\x3a\x4c\xc8\x80\x85\x4f\xee\x52\x33\x03\x42\xe5\xc3\x6f\x5d\xf4\xda\xf5\x3c\xfb\xb6\x52\xa9\xf4\x3d\xa7\xd3\x75\xce\x7a\x17\x9f\xfd\xbe\xe7\xb4\x8e\x9c\x0b\xff\x9d\x1a\x19\xf3\x31\xd9\x7f\xa7\x6c\x1e\x9b\xe4\x88\xe7\xb4\x3e\x1e\x9d\x9c\x9e\x9d\xf7\x7c\xfb\x56\xc7\x50\x9a\xed\x1f\xb6\x3e\xb5\x3b\xdd\x73\xe7\xc2\xb7\x6d\x1b\x4d\xdc\xed\xe9\x1d\xf2\xde\x69\x7d\x3c\x6e\x77\x9c\xb3\x9e\xf3\xd9\x9f\xd4\xa7\xb6\x6d\x98\x4d\x43\xac\xb9\x75\x9f\x5b\x45\x9f\x18\x55\x7c\x9a\xf4\x9e\x66\x20\x0c\x50\x0f\x42\x6a\x04\x4f\xa3\x8c\x9b\xb0\x26\x27\x06\xe4\x04\xcb\x8c\x9b\xb0\x2c\xf7\x71\x8d\x2a\x53\xa3\x71\xde\xe5\x9f\x7c\x19\x9a\x23\xb4\x8f\xe9\x55\x8b\xc5\xca\x71\x6d\xa7\x78\x84\xf7\x00\xae\x80\x86\x5a\xb3\x83\x88\x13\x21\x13\x2c\x0e\xaf\xb5\x73\xc0\x3d\xfe\x5e\x1f\x84\x7d\x36\x26\x74\x68\x00\xdb\x30\xba\x00\xcc\x4d\xdc\x77\xb0\x61\xf5\xfd\xd6\x1d\xe0\x84\x85\xa6\x06\x01\xbc\x4c\x84\x11\x2f\xc3\x60\xa6\xf1\xb2\x61\x26\xe4\x5d\xae\xb5\x71\x2a\x4c\x74\x48\x97\x89\xa8\x85\x45\x84\x29\xd6\x36\xb1\x0b\x96\x1c\x91\x34\xcd\xf8\x3a\x95\x92\x72\x26\x96\x34\x0d\x76\xf9\x15\x82\x85\x37\xef\x94\xb3\x14\xb8\xf6\x4a\x47\xc5\xe8\x93\xc0\x69\xc1\xb0\x88\xa2\xc7\x13\x95\x75\xba\xf8\x4a\xb3\xe0\x84\xb6\x52\xef\xad\x8c\x15\xfb\xc0\x03\x63\x59\x4d\x63\x4c\x74\xd7\xd8\xac\x55\x24\x93\xd8\xd2\xda\xf8\x0b\x4f\xa7\x9a\xd8\x17\x6f\x2c\xab\x65\x9f\x6b\xde\x6c\x1e\xac\xd6\xd2\xad\x9f\x2f\x97\x39\x17\x70\x08\xc9\x62\x47\x58\xf4\xee\xa0\x30\xfc\x2f\xdd\x7b\xb5\xc4\x59\x8b\xc3\x5f\x19\xe1\x10\xea\x1b\xd1\x7d\x75\x19\xe3\x6f\xaa\xfb\x57\xc5\xe7\xf4\xdf\x00\x00\x00\xff\xff\x9b\xb0\x6b\xd7\x43\x13\x00\x00")

func basicTypesJsonBytes() ([]byte, error) {
	return bindataRead(
		_basicTypesJson,
		"basic-types.json",
	)
}

func basicTypesJson() (*asset, error) {
	bytes, err := basicTypesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "basic-types.json", size: 4931, mode: os.FileMode(420), modTime: time.Unix(1569219724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _eventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4f\x73\xdb\x28\x14\xbf\xe7\x53\x30\x6e\x0f\xdd\x99\x4d\xbc\x3d\xed\x4c\x6e\xd9\x24\xed\x7a\x26\xdd\x64\x62\xb7\x3d\xec\xe4\x80\x25\x2c\xd3\x48\xe0\x05\x94\xc6\xb3\x93\xef\xde\x01\xfd\x45\x02\x84\x54\xdb\x71\x52\xfb\xd4\x8a\xf7\xe0\xfd\x1e\x8f\x1f\xef\x01\xf9\xff\x08\x00\x00\x46\x6f\x79\xb0\x44\x09\x1c\x9d\x82\xd1\x52\x88\xd5\xe9\x78\xfc\x8d\x53\x72\x9c\x7d\x3d\xa1\x2c\x1a\x87\x0c\x2e\xc4\xf1\x1f\x7f\x8e\xb3\x6f\x6f\x46\xbf\xe7\x9a\x38\x2c\xb4\xf8\xe9\x38\x6f\xe5\x27\x90\x89\x45\x1a\xc7\xeb\x93\x98\x92\x90\x92\xf1\xc3\xfb\x31\x7a\x40\x44\x9c\xc8\x7e\x0b\x5d\xb1\x5e\x21\xa9\x4c\xe7\xdf\x50\x20\x8a\xaf\x21\x5a\x60\x82\x05\xa6\x84\x8f\x4e\x41\x66\xa0\x6a\x50\x1d\xcc\x32\x9d\xea\xb3\xd6\x13\x17\x0c\x93\x28\xef\xa9\x52\x24\x69\x32\x3a\x05\xff\x6a\x5f\x55\xcb\xe5\xe3\x12\xcf\xd5\x58\x0d\x1d\xd5\x7a\x83\xd8\x82\xb2\x04\x92\x00\x8d\xb4\xd6\xbb\xf2\x7f\x4f\x95\xda\x08\x46\xe8\x02\x09\x88\x63\x6e\x37\x50\x83\x5a\xb6\xae\x18\x5d\x21\x26\x30\x6a\x6b\xaa\xf6\x04\x93\xb3\xa8\x0d\xbb\xea\x1d\x8b\x58\x75\xff\x09\x13\x9c\xa4\x09\x38\x8b\x10\x78\x77\xf9\x18\xc4\x69\x88\x49\x04\x3e\xa6\x90\x85\x18\x12\xfe\x9b\x01\x66\x66\x7b\x1c\x5f\x2f\x8c\x3e\x2a\x7e\xe6\xa1\xcb\x0e\xde\x32\x24\xf5\x47\x73\xc8\x71\x70\x2c\xe1\x72\x35\xd7\x6f\xc6\xb5\xf9\x1c\xc3\xa8\xe1\xc9\xfa\xef\xc9\xd8\x72\xd7\xfa\xfa\x64\x98\xaa\x04\x3e\x7a\x7a\x08\x3e\xfe\x02\x1e\xd2\xbe\x34\xfc\x35\x82\x61\xa8\x06\x83\xf1\x4d\x3d\xee\x16\x30\xe6\xa8\x21\xca\xd0\x7f\x29\x66\x28\x34\xaf\x9e\x3c\x2c\xed\xd3\xe1\xb1\x68\x02\xca\xc5\x96\x56\x8d\x30\x51\x45\xd5\x5a\x44\xc4\x39\xe5\x02\x28\x5a\xb1\xcc\xbc\x93\x5c\x4a\x29\x2b\xc9\x94\x12\x1f\x18\xb2\x8d\xa1\xda\x6f\x20\x0e\x5d\xed\x9f\xc9\x3d\xa1\xdf\x89\x39\x3c\x7a\x07\x81\x35\x9c\x2d\xfe\xc2\x0b\xab\x2f\x81\xc7\x6c\x68\xb2\xce\x99\xd1\x24\x03\x4a\xb8\x90\xce\x57\xce\x71\xca\x9b\x17\x87\xbd\xc5\x40\x23\x99\x71\x4b\x44\x36\x07\x35\xc1\x44\x06\x98\x1f\xda\x16\x8f\x2b\x55\x7b\x48\x94\x8a\xdd\xe4\x54\xff\x75\x5b\x52\x76\xec\x47\x5a\x09\x25\x68\xed\x9e\x9d\xe2\x67\x9f\xa5\xe2\xd7\x8e\x64\x4d\xdf\xed\x0d\xc9\x3c\x43\xfc\x9d\xef\x0a\x07\x7f\xfb\xeb\x5b\x56\x55\x07\x0f\xdd\xf5\xda\x61\x14\x51\x78\xec\x22\x73\x4a\xef\x31\x89\x9e\x77\x23\xf9\x2b\x33\x62\x27\x7b\xc9\x3f\x54\xdc\x16\x9e\x73\x6c\x19\x3e\x32\xbf\xf4\xb6\x52\x3a\xe8\x05\x6e\x2d\x21\x14\x28\x8f\xb9\xeb\x15\x22\xdd\x1a\x40\x0b\xd7\x0b\x28\x10\x28\x62\x36\xeb\x60\xff\x99\x4f\x62\x3e\x10\x5f\x45\x7c\xab\xaa\x44\xdd\x12\xf9\x61\xfe\x95\xb2\x7b\xbe\xa4\x2b\x0f\x0a\x9c\x70\x50\x4a\x77\x30\xe0\x9c\xd2\x18\x41\x03\xed\x98\xca\xbb\x1a\x4c\x7b\x98\x57\x66\xdc\xd4\xc5\x3b\xec\x80\x8c\xc1\xb5\x4d\x08\x0b\x94\xb8\xd7\x95\x71\x50\x17\xdd\x3a\x67\x43\x07\xdd\x93\x0b\x7a\xae\xff\x9a\xbd\x40\x72\xc1\x61\xf5\xd7\xf5\x3b\xd2\x4c\x81\x93\x9f\xf1\xf7\x4c\xaa\xef\xbf\xbf\x15\xca\xbd\xf0\x37\xe6\x53\x1a\x87\xd7\x69\xdf\xc4\x7e\xc2\x41\xdd\xef\xb2\x13\x20\x7b\xf1\xf0\x7d\x27\x51\xf5\xb3\xff\x5c\x1a\x10\xc7\x8a\xf0\x7f\x02\x41\xd5\xcd\xae\x21\x08\x18\xf5\x4d\x31\x6a\x86\x1f\x4f\x57\x28\xc0\x0b\x1c\x80\x99\xec\x67\x1f\x62\xbf\x11\xeb\xd2\xac\xe7\xce\x2c\x1c\xbb\x81\xff\xa9\x9d\xa6\xe6\x4c\x33\x34\xc9\xb0\x7b\x0f\xc8\x68\xcf\x7b\xa9\xf6\x58\x13\x56\x49\xb3\x2b\x6d\x09\x76\x82\xc9\x24\xdf\xb2\xdf\xf7\xad\x5c\x36\x75\x2a\x5a\x4b\x98\x3c\x12\x38\x54\xde\x40\x58\xf3\x37\x4a\x50\xbf\x9a\xca\x2b\xc5\xf0\x4d\x2f\x54\x5c\x7c\x60\x34\xf1\xa8\xbf\xb4\xd2\x42\xea\x80\x77\x13\x12\xc4\x29\xc7\x0f\xc8\x76\xb0\x5e\x6a\xfb\xaf\x77\xbf\xb5\xbe\xd1\x9c\xc2\xbd\xe6\xed\xeb\xdd\xb5\xa2\xe5\xc8\x33\xda\xd7\xad\x33\x7a\x70\xaa\xc3\xa9\x29\x47\x5f\x10\x49\x91\x2c\x68\x31\x89\x64\xa2\xe5\x73\x72\x50\xb8\xf8\x33\x47\x40\xe9\x83\xbc\x03\x90\xf5\xd0\xe1\xe6\xe2\x3c\x41\xb0\x14\x0d\x32\x7b\x09\xb9\x1c\x28\xbc\x24\x82\xad\x7b\xd8\xfb\x37\xe4\xca\xc2\x10\x64\x9a\x5d\xfc\xed\x9b\x10\xf4\x3b\xd7\xe8\xbf\x37\xf9\xed\x4b\x15\xf7\x74\x2f\xa3\xbe\x31\xe1\x3d\x19\x46\x39\xaf\x5b\xc9\x03\x3d\xbb\x3a\xdc\x77\x26\x39\xd0\xf3\xab\xa3\x67\x45\x48\xaf\x83\x9f\x1d\xb6\xd2\xcc\x35\xb7\x69\xdc\xcb\xb7\x85\x47\x33\xbd\xe7\x0a\x5c\x26\x47\xb7\x06\xae\x06\xed\x59\x02\x38\x88\x29\x1f\xe0\xdc\xf3\x4c\x6d\xaf\x9d\xab\x41\xdb\x9e\x73\x07\x66\x16\x45\x5d\xf7\x3a\x92\x0a\xdf\xe5\xeb\x9b\x7c\x78\x54\x9a\xc6\xf3\x1b\xe7\x31\xb8\xe3\xf8\xbb\x8a\xec\x19\x34\x5d\x63\x76\x27\x39\x3e\x09\x4e\xf7\x8d\x9e\x66\x87\xeb\xe6\x15\x78\xdf\xbe\x02\xaf\x1b\x58\x25\x75\x96\x86\x18\xb9\xcf\xfb\x95\xdc\x27\x14\xe2\xd4\x15\x6f\x4a\x6a\x2a\xd6\x71\x67\x57\x1f\x11\xdd\xd4\x61\x09\x8f\xd3\xa8\x87\x73\xa7\x52\xdc\x75\x40\xe5\xc5\x5a\x1e\xc7\x87\x7e\x39\xcc\x0a\x8a\xe5\x14\x45\x09\x22\x62\xe8\xe5\x6d\x3f\x77\xc5\x70\x8e\xe2\x1e\xfe\xba\x52\xf2\x1b\x89\xc6\x04\x93\x2b\x44\x22\xb1\x34\x9e\x6b\x01\xf3\xed\xa3\x61\xc9\xf5\xab\xd3\xba\xe9\x34\x83\xe0\x0a\x2f\xa7\x2f\x5b\x6d\xfa\x84\x34\x4f\xe8\x8c\x87\x7b\x19\xf0\x5c\xd4\xc6\x29\xa3\x07\xc9\xd4\x93\xf6\xd1\x7b\x35\x63\x59\x56\x39\xb9\x68\x52\x60\xef\x07\x0d\x1b\x88\x5e\x1f\x36\x57\x88\x2e\x89\xc0\x62\xed\x81\x2b\x13\x7c\x51\xf0\x18\xc7\xb4\xfd\x58\xa2\x02\x76\xf9\x80\x88\x00\x5f\x72\xb9\xdd\xc0\x2a\xac\x1a\x04\x09\xa9\x39\x98\x0a\x28\x52\xd3\x3e\x5c\xe2\xca\xa6\x2a\x97\xdb\x0d\x2e\xcd\xb4\x61\xe0\x1c\x6f\xf3\xf5\x19\x33\xec\xd1\xc3\x61\x35\x60\x94\x46\x0c\xc2\x90\xb2\x36\xbd\xd7\x4a\xcf\xdb\xab\x1d\xcd\x86\xb4\x63\x58\x86\x97\xdb\x6a\x83\x30\x53\xff\xd8\x0d\x88\x6c\xd0\x41\x30\x78\x9a\x24\xd0\x50\x65\x57\x40\xa6\xb9\xc4\x8e\xc8\x8c\x51\x3e\x10\x8a\xf3\x4f\x42\x0a\x34\x67\x11\x02\x85\xd4\x76\x16\x46\xcd\x8c\x41\x30\xdc\x8f\xf4\xb5\x87\xf4\xdb\x05\x52\x37\x64\x10\x92\xce\x87\xa2\xcd\xc7\x9c\xdb\xc5\xd3\x30\x67\x10\x24\xaf\x27\x60\xc6\x47\x3f\x5b\x85\x66\x30\x6b\xd8\xce\xd2\x7d\x41\x5a\xed\x30\xa5\xec\x96\xc1\xb5\x8d\x1a\x84\x0d\x27\x30\x32\x94\xbf\xb5\xc7\x1f\x99\xc0\xa6\x40\xa8\xf1\xac\x3c\x97\x5b\x33\x6c\xeb\x31\x1f\x2e\xd4\xea\xa1\x6d\x4d\x85\xf9\xdd\x86\x17\xab\xa5\x8c\x21\x22\xbe\x42\x11\x2c\x51\x78\x4e\x89\x90\xe9\xaa\x83\xdf\x32\x79\x90\x2b\x80\x42\x63\x37\xbb\xd0\x77\xdd\xcc\x61\x54\x91\xce\x63\xcc\x97\x28\xf4\xc6\x7c\x53\x68\xbc\x34\xd4\x47\x35\xec\x1e\x75\xaf\xc1\xfe\x86\x4b\x2c\x0f\xd5\xbd\x8e\xb1\xec\xd9\xb1\x26\x56\xfd\xb1\x93\xed\x0f\x4f\xcd\xb0\xdb\x5f\x9a\xa5\xb3\xf5\xe1\xb9\x47\x8d\x5f\xd4\xce\x96\x52\x5e\x2f\x44\xad\x42\xa6\x32\xad\x6c\xd6\xea\x0f\x9b\x4c\xe9\x43\x8b\x80\x4c\x9b\x6d\x6f\x7d\x0d\x89\x6f\xd9\x58\x4b\x8e\x2c\x12\xf5\xac\xc3\x22\xd2\xd8\xc8\x6d\x77\xba\xed\x3d\xd1\x36\xa4\x91\x9b\x5a\xb2\x8d\x03\x13\xd3\xa2\x7f\xc6\x30\xae\xfd\x75\xf5\x21\x8a\x73\x99\x57\x10\xc5\xed\xe4\x67\x4b\x41\x7c\x94\xb5\x3e\xfd\x08\x00\x00\xff\xff\xf7\x8b\xc8\x9c\xa5\x40\x00\x00")

func eventJsonBytes() ([]byte, error) {
	return bindataRead(
		_eventJson,
		"event.json",
	)
}

func eventJson() (*asset, error) {
	bytes, err := eventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "event.json", size: 16549, mode: os.FileMode(420), modTime: time.Unix(1569219712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _feedEntityJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x96\xe9\x91\xc4\xe5\x54\x29\xe7\xf6\x80\x44\x55\xa9\xb4\x5c\xaa\x1e\x4c\x32\x49\x4c\x13\x3b\x1d\x4f\x90\x10\xe2\xdf\x57\x8e\x93\x65\x13\xb2\xc0\xa2\x15\xd2\x1e\xf3\xe6\xcd\xcb\x7b\x33\xb6\x0f\x13\xc6\x18\xe3\x9f\x6c\x9c\x43\x29\x79\xc4\x78\x4e\x54\x45\x42\x6c\xad\xd1\x81\x47\x43\x83\x99\x48\x50\xa6\x14\x7c\xfe\x22\x3c\x36\xe5\xb3\xb6\x53\x25\x5d\x97\x8d\x44\x5b\xb5\xa1\x44\x4a\xeb\xa2\xd8\x87\x85\xd1\x89\xd1\x62\x37\x17\x29\x40\x12\x80\x26\x45\xfb\xd0\xa9\x77\x0a\xb4\xaf\xc0\x49\x98\xcd\x16\x62\xea\xd0\x0a\x4d\x05\x48\x0a\x2c\x8f\x98\x77\xd9\xe0\x5e\xa0\x87\x79\x15\x45\x45\x23\xf3\xad\x21\xb0\x5f\x4e\x75\x36\xe0\xb4\x7f\xb2\x84\x4a\x67\xc3\x2a\xe8\xba\xe4\x11\xfb\xd3\x43\x7d\x65\x07\x9a\x06\xf4\xa6\xb0\x03\x5d\x03\xef\xe1\x7f\x9f\xbf\x8e\xa7\x06\x4f\x5c\x24\x17\x6c\xaf\x1d\x83\x2d\xbe\x0e\x5d\xc9\xa2\xf8\x91\x8e\xda\x3a\x9c\x21\x7e\x21\x08\x8e\xcf\x37\xd2\xaa\x38\x70\x91\x6d\x33\xee\xa9\x48\x20\x55\x5a\x91\x32\xda\x8a\x4a\x52\xbe\x82\xac\x74\xc1\xce\x74\x8e\xb7\x26\xf2\xb3\xbe\x21\x57\xbb\x94\x8f\x14\x0f\xad\x32\xfa\xfa\x39\x5b\xb7\xc4\xc7\xe4\xea\x6c\xdd\x95\xa9\xc6\xe2\x42\x9e\xdf\x3f\x97\x0f\x0a\xe1\x7c\xdc\x15\x00\x10\x0d\x5e\x5a\x89\xab\xb3\xef\x60\xad\xcc\xde\x78\xf9\x4b\xa5\x97\xa0\x33\xca\x79\xc4\xe6\xa3\x3f\xb7\x24\xe3\x7f\x84\x32\x86\xab\x0e\x56\x27\xea\x7b\x98\x98\xbc\xb0\xc2\x11\xfe\xd7\x0a\x21\xe9\xad\xa5\x7b\x15\x47\x5e\x9c\x57\xaf\xec\xc8\x61\x9f\xf8\xd1\x1f\x9f\x02\x00\x00\xff\xff\x86\xde\xcd\x75\x15\x06\x00\x00")

func feedEntityJsonBytes() ([]byte, error) {
	return bindataRead(
		_feedEntityJson,
		"feed-entity.json",
	)
}

func feedEntityJson() (*asset, error) {
	bytes, err := feedEntityJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "feed-entity.json", size: 1557, mode: os.FileMode(420), modTime: time.Unix(1569219712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _feedEventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xcf\x6f\xdb\x20\x14\xc7\xef\xfd\x2b\x90\xbb\x63\x12\x6f\xa7\x49\xb9\x6d\x6d\x0f\x91\x2a\xad\x6a\x93\xee\x30\xf5\x40\xec\x67\x9b\xce\x06\x0f\x48\xb6\xa8\xca\xff\x3e\x01\xfe\x6d\xe3\x44\xa8\xf5\xb4\x69\x39\x45\xef\x7d\xfd\xfc\xfd\xc0\xc3\xc0\xcb\x05\x42\x08\x79\xef\x44\x90\x40\x86\xbd\x25\xf2\x12\x29\xf3\xa5\xef\x3f\x0b\x46\xe7\x26\xba\x60\x3c\xf6\x43\x8e\x23\x39\x7f\xff\xd1\x37\xb1\x4b\x6f\x56\x3c\x49\xc2\xf2\x29\xb1\xf4\x8b\xac\x58\x60\x2e\xa3\x5d\x9a\x1e\x16\x29\xa3\x21\xa3\xfe\xfe\x83\x1f\x01\x84\x73\xd8\x03\x95\x0b\x55\xbc\x2c\x20\x0f\x39\xa8\x0a\x6c\xfb\x0c\x81\x2c\xa3\x39\x67\x39\x70\x49\x40\x78\x4b\x64\x4c\xea\x38\x50\x49\xe4\xa1\x15\x33\x55\x88\x4c\x75\x99\x1b\x2d\x40\x6b\x55\x75\xd6\xd6\x04\x8c\x0a\xa9\x34\xda\x84\x57\x25\x8f\xb5\xce\xdb\x03\xdd\xc1\x2a\x1c\x79\xc1\xa3\x52\xa0\xd5\x75\xb7\x3a\x4e\xd3\x2f\x91\xb7\x44\xdf\x5a\x61\xf5\x7b\xe9\x45\xcc\xc8\x71\x50\x7a\x6f\x8b\x05\x09\xe6\x6a\x18\x84\x1e\x98\x4b\x3f\x84\x88\x50\x22\x09\xa3\xc2\xcf\xb1\x4c\x1e\x20\xce\x5a\x8e\x2b\xe7\xad\xc8\x93\x9d\xc8\x8c\xca\x19\x5c\xc5\xf0\xfd\x4d\x78\x5c\x10\x46\xc7\x3a\x42\xcd\x36\x7a\x2c\x74\xd3\x60\x95\xae\x9c\x90\x74\x7b\xae\xcd\xb2\x18\x87\x1a\xea\x72\x67\xa2\x7a\x69\xb6\x59\x6a\x3b\x4e\x34\x3b\x9e\x8e\x70\x6c\xee\x6f\x27\x9a\x12\xe5\xc3\x09\xa0\xf4\x6a\x43\x58\xeb\x3f\xd3\x40\x98\x97\x3a\x61\x88\x5d\x96\x61\x3e\xf6\xe9\x7c\x28\x14\x13\xad\x7c\xce\x84\x23\x0a\x8e\xe1\x1a\x24\x26\xa9\x18\xa1\xf9\x14\x03\x2a\x55\x6f\xbd\x44\x1a\x86\x9c\x80\x02\x26\xe4\x69\xa2\x2b\x26\xe4\x64\x48\x4d\x4b\x4e\x4c\x5b\xc6\xbe\x13\x1a\x9f\xc6\xfa\x6c\x84\x93\x91\x75\x8c\x39\xc1\xe5\xc0\x23\xc6\x33\x4c\x83\x33\x3a\xf1\xae\x16\x4f\x06\x39\x60\xd0\x6d\x2f\xfa\x95\x90\xad\xae\x79\x9a\xf3\xa6\xd2\x4e\x86\xd9\xb7\xe7\x44\x49\x32\x1c\xc3\x86\x8f\xd2\xad\x94\x06\x6d\xee\x6f\x5f\x8f\x4a\xbf\xd6\xfa\x81\xac\x4d\xb9\x6d\x5b\x38\x1e\xc3\x59\xab\xf4\x5b\x4f\x8f\xf6\xe0\xe4\xfe\x27\x96\x41\x02\xe1\x15\xa3\x52\x1d\x0d\xed\x1c\x5f\x8d\x10\x95\xca\x69\x36\xaf\x8e\xbd\xf3\x11\x2f\x1a\xa0\x1e\x0e\x43\x5d\x0f\xa7\x77\xcd\xeb\x4e\x84\x53\x01\xa5\xa4\xe7\xbf\x33\x10\x24\xea\x0d\x0e\x1a\xb9\x40\xb5\x34\xf6\x83\x66\x4b\x56\xdd\x9b\x1a\x1f\xb2\x3e\x72\x1f\xbb\x1f\x39\x76\x66\x47\x26\xd0\x3f\xb9\xeb\x0c\x87\x1f\x3b\xc2\x21\x1c\x9c\x3a\xd4\xb8\x09\xce\x86\xb3\xe5\x3d\x6e\x2c\x5d\x5d\x8a\xac\xa2\xa1\x2b\x43\x6d\xa0\x1a\x3d\x8b\x40\x9d\x38\x2d\x29\x39\x70\x66\xac\x92\x8d\xd3\x84\x45\xd1\xdc\x9c\x2d\x92\xce\x2e\x67\x51\x0d\x6c\x13\x16\xe5\xa9\x8e\x7f\x6a\x4f\xf4\xd0\xa2\xfe\x83\x9d\x5b\x6f\x4d\xff\x1b\xf7\x9f\x68\xdc\xfe\xc6\xff\xda\x7d\x7b\x61\xb2\xc7\xdf\x01\x00\x00\xff\xff\x6a\x53\xd3\x12\x22\x13\x00\x00")

func feedEventJsonBytes() ([]byte, error) {
	return bindataRead(
		_feedEventJson,
		"feed-event.json",
	)
}

func feedEventJson() (*asset, error) {
	bytes, err := feedEventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "feed-event.json", size: 4898, mode: os.FileMode(420), modTime: time.Unix(1569219712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _feedVenueJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xb1\x4e\xf3\x30\x14\x85\xf7\x3c\x85\xe5\xfe\x63\x13\xff\x4c\x48\x59\x81\xa1\x13\x03\xa8\x0c\x88\xc1\x8d\x6f\x1a\x57\xae\x1d\xec\x9b\xa2\xa8\xca\xbb\x23\xc7\x31\x90\xb6\x81\x8a\xa1\x12\x19\xcf\x3d\x3e\xb9\xdf\x91\xbd\x4f\x08\x21\x84\xfe\x73\x45\x05\x5b\x4e\x73\x42\x2b\xc4\x3a\x67\x6c\xe3\x8c\x4e\x83\x9a\x19\xbb\x66\xc2\xf2\x12\xd3\xff\xd7\x2c\x68\x33\x3a\x1f\x4e\x4a\x11\x4f\xb9\x9c\x0d\x53\x97\x71\x8b\x65\xa3\x54\x9b\x29\xa3\x85\xd1\x6c\x77\xc5\x4a\x00\x91\xee\x40\x37\x90\xf9\xf0\x18\x80\x6d\x0d\x3e\xc1\xac\x36\x50\x60\x54\x6b\x6b\x6a\xb0\x28\xc1\xd1\x9c\x84\x25\x7b\x1d\x34\x4a\x6c\x47\x5a\x48\x91\xa8\xfa\x98\xbb\xde\x40\x1e\x7d\xea\x7c\xec\x29\x8c\x76\xe8\x3d\xfd\x12\xf4\x63\xd8\x7d\xfa\xc2\x68\x21\xbe\xf9\xc1\xd2\x3b\xc8\xe2\xf6\x30\x9d\x2b\x75\x5f\xd2\x9c\x3c\x8f\x64\xff\xed\x8f\x94\xd0\x9c\x05\xef\xa7\x2b\xee\x64\x91\xfa\x1a\x5c\x5f\xcc\x8c\x09\x28\xa5\x96\x28\x8d\x76\xac\xe6\x58\x3d\xc0\x7a\x0b\x1a\xe9\x51\x4e\x37\x52\x5e\xa6\x89\x42\x2b\x67\x70\x0d\xf5\xfd\x25\x3c\xeb\xa4\xd1\x3f\x82\x2d\x07\xdf\x65\xb0\xe2\x56\xbf\x42\x7a\xe3\x58\x54\x20\x6e\x8c\x46\x5f\xcb\x34\xd9\x53\x30\x92\xe8\xbc\x0c\xdb\xc1\x7a\xe7\x23\x26\x5f\x40\xa9\x85\xd7\x46\x5a\x10\xa3\xfd\xe2\xf3\x3e\xf1\x20\x27\x6f\xf4\x89\xbb\x30\xdd\x65\x12\x56\xea\xde\x03\x00\x00\xff\xff\x58\x43\xfa\x7c\xf7\x04\x00\x00")

func feedVenueJsonBytes() ([]byte, error) {
	return bindataRead(
		_feedVenueJson,
		"feed-venue.json",
	)
}

func feedVenueJson() (*asset, error) {
	bytes, err := feedVenueJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "feed-venue.json", size: 1271, mode: os.FileMode(420), modTime: time.Unix(1569219712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imageTypesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4b\x6f\xe2\x30\x10\xbe\xf3\x2b\x2c\xc3\x71\x89\xe1\xb4\x52\xae\xcb\x05\x69\xa5\x5d\x21\x71\xaa\x38\x18\xec\xc0\x20\x3f\xd2\xb1\x53\x15\x55\xf9\xef\x95\xe3\xf0\x76\xa2\x52\xb5\x52\x39\x70\x98\xef\x31\xdf\xd8\xe3\xbc\x0d\x08\x21\x84\x8e\xdc\x66\x27\x35\xa7\x39\xa1\x3b\xef\xcb\x9c\xb1\xbd\xb3\x66\x1c\xab\x99\xc5\x2d\x13\xc8\x0b\x3f\x9e\xfc\x66\xb1\x36\xa4\xbf\x5a\x25\x88\xa3\xca\xe5\xac\x45\x5d\xc6\xd1\x17\x95\x52\x87\x4c\x59\x23\xac\x61\x2f\x53\x06\x9a\x6f\xe5\xd8\x1f\x4a\xe9\xb2\xe0\x7e\x74\x10\xb2\x00\x03\x1e\xac\x71\x34\x27\x31\x50\x03\x34\x82\x25\xaa\xeb\x72\x03\x05\x97\xd0\x96\x23\xf2\x43\x6b\x74\xd6\x79\xa9\xef\x35\x51\x07\x5e\x35\xc2\x79\xf0\x26\xcb\xc5\xdf\x1b\xf1\x95\xbb\xf3\x08\x66\x9b\x62\x14\x16\x35\xf7\x81\x53\x21\xd0\x2b\xbc\xbe\x49\xa3\xc1\xcc\xdb\x40\xd3\x41\x82\x14\xc7\xfc\xb6\x19\xfb\xe6\xb3\xeb\xbd\xdc\xf8\x14\xa3\x44\x5b\x4a\xf4\x90\xc8\x75\x8e\x20\x3a\xb1\x44\x0e\x32\x9f\x25\x1a\x9d\xc8\x5c\xa9\x7f\x05\xcd\xc9\x53\x27\x25\xfc\xba\xbb\x9d\x8c\x46\x28\x83\x0f\x5d\x73\x07\x9b\x8b\x6d\x1b\xb2\x8b\x3d\x63\x55\x05\x82\xf6\x9a\xd5\x9d\xe8\x2a\x89\xd4\xe9\xe1\x28\x72\x0f\xf6\xa1\x83\x5a\x34\x8a\x9e\xb3\x3a\x5e\x9f\xa9\xf4\x5a\x62\x1f\x53\x83\x01\x5d\x69\x9a\x93\xc9\x43\xa1\x85\xd5\x60\xb8\xf1\x7f\xac\xb2\xf8\xc1\xf0\xb3\x56\x43\xa2\xe8\xe7\xdc\xf5\x4e\xbe\xc6\x48\x5f\x7b\xdf\x77\xd5\xc4\x61\x52\x94\xcf\x15\xa0\x14\x9d\xd3\x86\x57\xd4\xbb\x39\x77\xd8\x2a\xd1\x86\x0b\xd1\x0c\xcb\xd5\xff\xcb\x87\x5b\x70\xe5\xe4\x27\x3e\x4e\x83\xf8\x5f\xbf\x07\x00\x00\xff\xff\x7f\xa8\x0d\x6d\x1d\x06\x00\x00")

func imageTypesJsonBytes() ([]byte, error) {
	return bindataRead(
		_imageTypesJson,
		"image-types.json",
	)
}

func imageTypesJson() (*asset, error) {
	bytes, err := imageTypesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "image-types.json", size: 1565, mode: os.FileMode(420), modTime: time.Unix(1569061350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesTypesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x6e\xdb\x30\x0c\xbe\xf7\x29\x04\xb5\xc7\x26\x5e\x4f\x03\x72\xdd\x50\x60\xa7\x14\x43\xb0\xcb\x90\x83\x1a\xd3\x89\x0a\x59\xf2\x24\x7a\x80\x31\xe4\xdd\x07\xff\xd6\xb2\x65\x47\x19\x96\xae\x6b\xc5\x43\x80\x90\x9f\x48\x9a\x3f\x82\xbe\x5f\x57\x84\x10\x42\x6f\xcc\xee\x00\x29\xa3\x2b\x42\x0f\x88\xd9\x2a\x8a\x9e\x8c\x92\x8b\x5a\xbb\x54\x7a\x1f\xc5\x9a\x25\xb8\xf8\xf0\x31\xaa\x75\xd7\xf4\xb6\x39\xc9\xe3\xf6\x94\x59\x45\x8d\xd5\x2c\x99\xc6\x24\x17\xa2\x58\x0a\x25\x63\x25\xa3\x9f\x77\x91\xce\x05\x98\x05\x16\x19\x98\x65\xe9\xbd\xf5\x10\x43\xc2\x25\x47\xae\xa4\xa1\x2b\x52\x27\x54\x19\x54\x06\x92\xcb\xfd\x5a\x7f\x12\xca\x70\xb9\xff\x9a\x0b\xd8\x14\x19\x58\xa8\x0a\x89\xb5\x96\x1a\xd4\x5c\xee\x1b\xc7\x9d\x15\x64\x9e\xd2\x15\xf9\x6e\x69\x2b\xcb\x67\x56\x0c\xc0\x8d\x1a\xc1\xa5\x7f\xd0\x60\x00\xa9\x65\xd8\x76\xff\x8e\xb7\xa3\xd4\xcb\x8c\xcd\x74\xba\x4c\xeb\x51\x02\x94\x23\xa4\xe3\x33\xf5\x39\x8e\xa2\x3a\xb8\xae\xdd\x93\xd2\xbf\x2b\xd1\x36\x80\x7a\x7c\x82\x1d\xba\x10\x99\x56\x19\x68\xe4\x8e\xf4\x86\x5e\xdc\x56\x3b\xa1\x32\x11\x52\xf5\x66\x1c\xab\x43\x33\x21\xd6\x89\xb3\x11\x7d\x99\x0e\xd7\x39\xba\xd1\x50\xfa\xa1\xd7\x51\x6f\x76\xa2\xc9\x71\x99\x75\x78\x9c\xb4\x6e\x9d\x96\xa3\xfb\x03\x69\xcc\x10\xee\x95\x76\xce\xa7\x05\xec\x6a\x56\x4e\x19\xf9\xc6\x44\x0e\x24\x51\x9a\x3c\x97\xf0\xac\xb8\xc8\x53\xb8\xd7\x2a\xf5\x0c\xba\xe1\x29\x90\x0a\xff\x92\x8d\x7a\x64\x86\xef\x7a\xab\x6f\x37\xae\xfc\x84\x97\x69\x52\x19\x69\xa3\xce\x29\xd5\x46\xbd\xed\x42\x8d\xb4\x8e\xd2\x9d\xf8\xcc\x99\x5a\xf2\x64\xb6\xd6\xc4\xf3\x26\xb2\xf0\x27\x6f\x25\x0b\xbd\x53\xd2\x60\xbd\x6d\xc5\x7c\xe9\xc8\x6c\xf9\xe6\xad\x13\xf3\x56\x65\x80\x07\x90\x7f\xbf\x0a\xbe\xd7\x8d\x75\xc8\x6f\x5c\xfb\xe2\xe7\xb8\x0b\xe0\x37\xc6\xb1\x4f\x2b\x5a\x99\x6f\x49\x2b\xee\xe9\xf6\xf7\x33\xd3\xda\x73\x2e\x98\xff\x65\x15\xf0\xc4\x35\x42\xc2\x2e\x8c\xe5\x42\xbb\xe0\xd3\x8b\x56\xc2\x32\x4c\xe3\xff\x70\x19\x5c\x6f\x7a\x97\x84\x75\x18\xc8\xc5\xd6\xc1\xb7\x23\xad\xbc\xd2\xa5\x18\x69\xb7\x8e\x97\x95\x86\x1f\x39\xd7\x10\x4f\x56\xbe\x1e\x6b\x0f\xce\x71\x8a\x1e\xcc\xbf\x88\xbd\x92\x65\x71\x5c\xb5\x89\x89\x87\xfe\x48\x26\x4c\x18\xb0\xd0\x83\x99\xa7\x29\x97\x5f\x1a\x56\x7b\xe7\xa4\xcb\xbb\x67\xc6\x76\x09\xba\x5c\x12\xc2\x5c\x43\xa0\xcb\x81\x2e\x07\xba\xec\xc2\x07\xba\x3c\x94\x40\x97\x03\x5d\x7e\x35\x6f\xa2\x40\x97\x9d\x98\x40\x97\xc9\xfb\xdb\x85\x40\x97\xdd\x98\x40\x97\x1b\xd4\x7b\x5b\x87\x40\x97\xfb\x08\x5f\xba\xfc\x2f\x08\xef\x55\xfd\x7b\xfc\x1d\x00\x00\xff\xff\x8e\x2a\x41\x46\x74\x1f\x00\x00")

func rulesTypesJsonBytes() ([]byte, error) {
	return bindataRead(
		_rulesTypesJson,
		"rules-types.json",
	)
}

func rulesTypesJson() (*asset, error) {
	bytes, err := rulesTypesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules-types.json", size: 8052, mode: os.FileMode(420), modTime: time.Unix(1568917545, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _venueStatusJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\x31\x4f\xf3\x30\x10\xdd\xfb\x2b\x2c\xf7\x1b\xbf\xc4\x30\x21\x65\xa5\x0c\x9d\x18\x90\x58\x10\x83\x1b\x5f\x5a\x57\xae\x1d\xee\x2e\x91\xaa\xaa\xff\x1d\x39\x4e\x5a\xa5\x81\x56\x30\x90\x29\x7e\x3e\xbf\x7b\xef\xdd\x1d\x66\x42\x08\x21\xff\x51\xb9\x81\x9d\x96\x85\x90\x1b\xe6\xba\x50\x6a\x4b\xc1\x67\x09\xcd\x03\xae\x95\x41\x5d\x71\x76\xf7\xa0\x12\x36\x97\xff\xfb\x97\xd6\x0c\xaf\xa8\x50\xfd\x2d\xe5\x1a\xb9\x6a\x9c\xdb\xe7\x2e\x78\x13\xbc\x6a\xef\x55\x0b\xbe\x81\x8c\x58\x73\x43\x79\xa4\x1f\x28\x78\x5f\x43\xe4\x08\xab\x2d\x94\x3c\xa0\x35\x86\x1a\x90\x2d\x90\x2c\x44\x92\xd9\xe1\x5d\xbf\xf3\x39\x31\x58\x76\x1d\xc5\x6b\xec\x21\x96\x8b\x9e\xe4\x54\xa0\x9d\x7b\xae\x64\x21\xde\x46\x70\xfc\x0e\x13\x24\xd9\x42\x88\xf5\x72\xa5\xc9\x96\x59\x54\x98\x34\xcf\x95\x81\xca\x7a\xcb\x36\x78\x52\xb5\xe6\xcd\x0b\xac\x77\xe0\x59\x4e\x78\x8e\x23\xe4\xfd\x74\x3a\x9e\xb5\xc9\x16\x90\x6c\xf0\x57\x1d\xa5\x8a\xbf\x31\x34\xe8\xf9\x95\x99\xb2\x41\x04\xcf\xdd\x0c\x9e\x5a\xf0\xbc\x34\x74\xc5\xd9\x63\x2a\x17\x69\x66\xdd\x03\xb1\x5c\xd0\xa5\xd3\x61\x3b\x34\xa2\xde\x5f\x5e\x5a\x86\xdd\xb4\xc7\x8d\x84\xbe\x4f\xe9\x07\x49\x5d\x1d\xfd\x34\xb1\x71\x6a\xe3\xfb\xf4\xd7\x27\x29\x11\x3e\x1a\x8b\x60\x46\xd2\xe3\xd6\x7f\xb1\x36\xb7\xc2\x9f\xa5\xb6\xc7\xcf\x00\x00\x00\xff\xff\x60\x11\xe1\x2e\xe6\x03\x00\x00")

func venueStatusJsonBytes() ([]byte, error) {
	return bindataRead(
		_venueStatusJson,
		"venue-status.json",
	)
}

func venueStatusJson() (*asset, error) {
	bytes, err := venueStatusJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "venue-status.json", size: 998, mode: os.FileMode(420), modTime: time.Unix(1569219712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _venueJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x98\x4f\x4f\xdc\x3c\x10\xc6\xef\x7c\x0a\xcb\xbc\xc7\x77\x37\xec\xa9\xb0\x37\x0a\x54\x20\xad\xc4\x0a\x68\x39\x54\x1c\x66\xe3\xc9\xc6\xd4\xb1\x53\xdb\xa1\x45\x88\xef\x5e\x25\x4e\xc2\x86\x24\x86\x5a\x28\x52\x39\xb1\xf6\x33\xf6\xf3\xf3\xbf\xb1\xf3\xb4\x47\x08\x21\xf4\x3f\x13\xa7\x98\x01\x5d\x12\x9a\x5a\x9b\x2f\xa3\xe8\xde\x28\x39\x73\xa5\x73\xa5\xb7\x11\xd3\x90\xd8\xd9\xc1\xa7\xc8\x95\xed\xd3\xff\xeb\x48\xce\x9a\x28\xb3\x8c\xea\x5a\x33\x07\x6d\x93\x42\x88\xc7\xb9\x50\x92\x29\x19\x3d\x2c\xa2\x07\x94\x05\xce\xcb\x76\x9b\x58\xfb\x98\x63\x19\xac\x36\xf7\x18\xdb\xa6\x34\xd7\x2a\x47\x6d\x39\x1a\xba\x24\xce\x5f\x55\x5e\x75\xf4\xf2\xdb\xb5\xc0\xad\xa8\x9a\xf8\x56\x36\x4e\x2e\x4e\xeb\x46\x5a\x01\x08\x71\x99\xd0\x25\xf9\xde\x29\x2e\xff\x9e\x7a\x25\x8e\x47\x63\xa9\xa7\x1b\x30\x3c\x9e\x95\x0e\x4d\xe5\x79\x3f\x62\x98\x70\xc9\x2d\x57\xd2\x44\x39\xd8\xf4\x1a\xb7\x19\x4a\x4b\x7b\xed\x3c\x77\x4a\xee\xda\x5f\xcf\x2f\xde\xe8\x03\x6a\xc3\x95\xf4\x12\x39\xc5\x34\x40\x8d\x9f\x20\x18\x94\x96\xdb\xc7\x6b\x0b\xb6\x30\x1e\xa2\xb3\x4a\x46\x6a\xdd\x34\x5c\x1d\x6b\x41\x70\x8d\xfd\x31\xaa\x9b\xea\x9f\x69\x68\x5c\xa7\x41\x18\x85\x16\x1e\x88\xaf\x57\xab\x89\x10\x4a\x1f\x41\x00\x0c\x4d\xac\x79\x6e\xfd\xbb\xe6\x74\x47\x35\xd1\x51\xa0\x95\x09\x9c\x13\x60\x4c\xa3\xf1\x6d\x99\xe3\x5a\xf1\x0a\xa5\x39\x38\x8d\xd5\x5c\x6e\x5f\xd7\x66\x5c\xae\x50\x6e\x6d\x4a\x97\x64\x31\xd8\x71\xae\x8c\x8d\x15\xf3\x2d\xeb\x75\x23\x99\x68\x59\xfc\x68\x3b\x0c\x1b\x4a\x8d\x70\x99\xac\xaa\x64\xe3\x1b\x4f\x8d\x40\x54\x42\x6a\xe1\x34\x6c\x1d\x6f\x41\x74\x02\x2c\xb7\x85\x77\xbe\x56\x8d\x64\x64\xa9\xc8\x22\xdb\xa0\x1e\x58\x2a\x3c\x2b\x32\xba\x24\xb3\xa3\x83\xd7\x75\xf0\xbb\xae\x3b\x3a\x18\x76\xa5\xe4\xf6\x4d\x5b\xad\x26\xd4\xd7\xe2\x70\xdc\xd8\xe2\x70\xd8\x19\x66\xc0\x7d\xc7\xdd\x59\x55\xff\x57\x9b\x2a\x51\x3a\x03\x5b\xd6\xbb\xc6\x87\x73\x05\x0a\xcc\x53\x25\xbd\xf9\xa2\xd5\x7c\xf0\xa6\xfe\x95\x22\x8a\x38\x05\xae\x8f\xe3\xd8\x7f\xac\xdc\xb6\x52\xe2\xb4\xe4\xa6\xec\x7c\x9a\xed\xd0\xf3\x19\x96\x0e\xb8\x81\x8d\x40\xf6\x19\x6c\xaa\x95\xca\x7c\x39\xa1\x96\x92\x46\x3b\x25\x6d\xcf\x67\x10\x6d\x8a\x50\x2e\x8a\x2f\x10\x73\xc1\x7b\x57\xe3\x2e\xee\xb9\xd3\x92\x17\xf1\x94\xbc\x7d\xa7\x61\xc0\x60\xd6\xa8\x33\x90\x28\xed\x89\x12\x02\xe3\x37\x12\xff\x39\x18\xd2\x46\x90\x9d\x90\x91\x5d\xb6\x51\x4a\x20\xc8\xe1\x7d\xac\x72\x94\x5c\x6e\xaf\x0a\xe1\x1d\xe9\x4b\x27\x23\x4e\xf7\x51\xe3\xab\xcb\xd6\x46\xc7\xb7\x63\x2d\x68\x68\x63\xa1\xcc\x3b\xe0\x4e\x9c\x6c\x52\xb8\x8e\xb5\x20\x38\x9e\xc1\xd6\x8b\x75\xe1\x04\x1f\xc5\x53\xf5\x37\xca\x53\xbb\x09\x9b\xa6\x42\x6b\x94\xf6\x16\x6c\x9c\x22\x3b\x51\xd2\x96\x8f\x4d\xcf\x7c\x39\x3d\xa9\x03\x48\x13\x31\xd1\xa1\xde\xb5\x19\x44\x9c\x17\x1b\xc1\x4d\x8a\xec\xdd\xcc\xeb\x26\xe2\x5f\xa3\xde\xdb\x61\xa7\x1a\x7f\x16\x5c\x23\xeb\xf8\xa3\x9c\xd1\x81\xef\x05\x63\xaf\xee\xde\x83\x75\xe0\x99\x31\xf4\x00\x18\xbb\x42\x0f\x5d\x3e\x07\xaf\x7e\xbe\x0b\x88\x2f\x5d\x7b\x93\xdb\xdb\x89\xa0\x12\xdc\xd5\x03\x08\x8c\x55\x13\x02\x62\xbd\xfb\xed\x28\x01\x61\x70\xef\xf9\x4f\x00\x00\x00\xff\xff\x65\x94\x1f\x6f\xe3\x12\x00\x00")

func venueJsonBytes() ([]byte, error) {
	return bindataRead(
		_venueJson,
		"venue.json",
	)
}

func venueJson() (*asset, error) {
	bytes, err := venueJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "venue.json", size: 4835, mode: os.FileMode(420), modTime: time.Unix(1569219712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"basic-types.json":  basicTypesJson,
	"event.json":        eventJson,
	"feed-entity.json":  feedEntityJson,
	"feed-event.json":   feedEventJson,
	"feed-venue.json":   feedVenueJson,
	"image-types.json":  imageTypesJson,
	"rules-types.json":  rulesTypesJson,
	"venue-status.json": venueStatusJson,
	"venue.json":        venueJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"basic-types.json":  &bintree{basicTypesJson, map[string]*bintree{}},
	"event.json":        &bintree{eventJson, map[string]*bintree{}},
	"feed-entity.json":  &bintree{feedEntityJson, map[string]*bintree{}},
	"feed-event.json":   &bintree{feedEventJson, map[string]*bintree{}},
	"feed-venue.json":   &bintree{feedVenueJson, map[string]*bintree{}},
	"image-types.json":  &bintree{imageTypesJson, map[string]*bintree{}},
	"rules-types.json":  &bintree{rulesTypesJson, map[string]*bintree{}},
	"venue-status.json": &bintree{venueStatusJson, map[string]*bintree{}},
	"venue.json":        &bintree{venueJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
